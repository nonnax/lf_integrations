#!/usr/bin/env bash
# interpreter for shell commands
# set -f
# set -u
#set shell zsh
set shell bash
set autoquit true
# set shell osh
# shopt -u parse_equals simple_echo
shopt -s globstar extglob
# set shell zsh
#set shellopts '-euy'
set shellopts '-eu'
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# set shellopts '-eu'

set ifs "\n"
# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.

# set filesep "\n"  # default already
set color256 true
set drawbox true
# set single false
set icons true
set ignorecase true
set incsearch true
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
# set ratios 1:6:3
# set ratios 1:3:2
set ratios 1:2:3 # default

cmd thumbnails ${{
	feh -qtP --index-info='' --action 'lf -remote "send $id select %F"' &
	lf -remote 'send redraw'
}}

map i thumbnails


# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
# map <enter> shell
cmd edit_cd ${{
   set -f
   if [ -d "$f" ]; then
      cmd="cd"
	  lf -remote "send $id $cmd \"$f\""
   elif [ -f "$f" ]; then
	   case $(file -b --mime-type - < "$f") in
	  	(text/*)   
			$EDITOR "$f"
	   esac
   fi
}}

map <enter> edit_cd
# map <enter> $termite -e 'echo "hello"' &!
# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd xpaste %{{
    load=$(cat ~/.local/share/lf/files)
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        gcp $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
	rm ~/.local/share/lf/files
    lf -remote 'send clear'

}}

cmd link %{{
    load=$(cat ~/.local/share/lf/files)
    mode=$(echo "$load" | sed -n '1p')
    # echo "$load"
    list=$(echo "$load" | sed '1d')
	ln -s "$list" .
    lf -remote 'send clear'
}}

cmd mklinks %{{
	echo $( cplinks )
	lf -remote 'send unselect'
	# lf -remote 'send clear'
}}

cmd lf_man_paste %{{
    # load=$(lf -remote 'load')
    load=$(lf load)
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -R $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}


# mkdir at current directory
cmd mkdir %mkdir -p "$1" && lf -remote "send $id select \"$1\""

# make file at current directory
cmd mkfile %touch "$1" && lf -remote "send $id select \"$1\""

# make file at current directory
cmd mkexec_toggle %{{
	# set -f
	[[ -x $f ]] && chmod -x "$f" || chmod +x "$f"
    lf -remote 'send reload'
}}

# make file at current directory
cmd mk_readonly_toggle %{{
	# set -f
	[[ -w $f ]] && chmod -w "$f" || chmod +w "$f"
    lf -remote 'send reload'
}}


# rename file via editor
cmd rename_edit ${{
	# shopt -s oil:all
	# shopt -u parse_equals simple_echo
	# set -f
	# for f in $fs; do
		temp_file="$(mktemp)"
		fn=$(basename -- "$f")
		echo "$fn" > $temp_file
		$EDITOR "$temp_file"
		# edline.py "$temp_file"
		# read --line fname < $temp_file
		#join new lines 
		fname=$(tr  -d '\n' < "$temp_file")
		mv -- "${fn}" "${fname}"
	# done
	lf -remote "send $id unselect"
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

cmd bulk-rename ${{
	set -f
    old="$(mktemp)"
    new="$(mktemp)"
    # fs="$(ls)"
    [ -z $fs ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv -i --backup=numbered $fx ~/.trash

cmd rm_delete ${{
	set -f 
	# [[ $ans == "y" ]] && rm --Rdfr $fx
	[[ $ans == "y" ]] && trash	
    lf -remote 'send reload'
	
}} 

cmd rm_delete_forced ${{
	set -f
	# fd -td -x 
	# chmod -R +rwx "$fx"
	# if [[ $1 == "y" ]]; then
	for fn in $fx
	do
		echo "$fn"
		# chmod -R +rwx "$f"
		rm -irf $fn
	done
	# fi
    lf -remote 'send reload'

}} 

# define a custom 'delete' command
# cmd rm_delete ${{
	# set -f
	# printf "$fx\n"
	# read -p "delete?[y/n]" ans
	# [ $ans = "y" ] && rm -rfd $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f";;
        *.tar.gz|*.tgz) tar -xzvf "$f";;
        *.tar.xz|*.txz) tar xJvf "$f";;
        *.zip) unzip "$f";;
        *.rar) unrar x "$f";;
        *.7z) 7z x "$f";;
        *) echo "Unsupported archive";;
    esac
}}

# cmd tar %tar cvf "$f.tar" "$f"
cmd targz ${{
	set -f
	fname="$(basename $f)"
	tar -cvzf "$f.tar.gz" "$fname"
    lf -remote 'send unselect'

}}

cmd cpdated ${{
	set -f
	fname="$(basename $f)"
	cpnum "$fname"
  lf -remote 'send reload'
    # lf -remote "send select $fname"
}}

cmd untar ${{
	set -f
	for f in "$fx"; do
		tar "xvf" "$f"
	done
  lf -remote 'send clear'
}}

# compress current file or selected files with tar and gunzip
cmd targz_selected ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar -czvf $1.tar.gz $1
    rm -rf $1
    lf -remote 'send $id unselect'
    lf -remote 'send reload'
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# chmod current file or selected files
# cmd chmod %set -f; chmod $1 $fx

cmd chmod ${{
	set -f 

	for f in $fx; do
		sudo chmod "$1" "$f" 	
	done
	
	lf -remote 'send clear'
	lf -remote 'send unselect'
	lf -remote 'send reload'
}} 

# chmod current file or selected files
cmd chown ${{
	set -f
	sudo chown -chR $1:$1 $fx 
	lf -remote 'send $id unselect'
	lf -remote 'send reload'
}}

# cd normally
cmd cd ${{
	lf -remote "send $1 cd \"$res\""
}}

cmd cd_OLDPWD ${{
    lf -remote "send cd \"$OLDPWD\""
}}
# cd with fzf 
cmd fzfcd ${{
   # res="$( find . -maxdepth 3 2>&1 | sed 's/^.\///' | sort | fzf --reverse --preview='cleaner.sh && file --mime {} | grep -i 'text' && bat --color=always {} || pv.sh {}' --header='Jump to loc')"
   res="$( find . -maxdepth 3 2>&1 | sed 's/^.\///' | sort | fzf --reverse --preview='[ -f {} ] && preview {} || tree {} ' --header='Jump to loc')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
   echo "send $id $cmd \"$res\""
   lf -remote "send $id $cmd \"$res\""
 }}

cmd fzfcdbig ${{
   res="$(fd -S +50m | sort -k5 -r  | fzf --preview='ls -l {}'| awk '{print $(NF)}')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 	lf -remote "send $id $cmd \"$res\""
}}
# find word inside files and select file afterwards
cmd findword ${{
	if [ ! "$#" -gt 0 ]; then
	  lf -remote 'send echo "Need a string to search for!"'
	  exit 1;
	fi	

	findo "$1" 
	found="$(foundo)"
	if [ -f "${found}" ]; then
		lf -remote "send $id select \"${found}\""	
	fi
}}

cmd makefile ${{
  fname="$(newfile $1)"
	if [ -f "${fname}" ]; then
    lf -remote "send $id select \"${fname}\""	
  fi
}}

# pdf to text
cmd pdftotext ${{
	pdftotext.sh "$f"
}}

# find word inside files
cmd jfind_word ${{
	alacritty --title='jfind' -e jfind "$1" &
}}


# play media files
# cmd playmedia %set -f; xdg-open $fx
cmd playmedia ${{
	# set -f
	for f in $fx; do
		xdg-open $f
	done
}}

# 
# cmd aj %lf -remote "send $id cd '$(autojump $1)'"
# map a push :aj<space>

# change wallpaper
cmd setwallpaper ${{
   cp "$f" ~/.local/share/bg/wall.png && feh --bg-scale --no-fehbg "$f"
 }}

cmd oilchange ${{
	shopt -s oil:all
	= ARGV	
	for i in @range(1000) {
		echo "hello"
	}
}}

cmd catrb ${{
	d=$( catrb.oil )
	lf -remote "send $id cd \"${d}\""	
}}

cmd fzf_last_changed ${{
   res=$( fd -t f --changed-within 2days | fzf )
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
   lf -remote "send $id $cmd \"$res\""
}}
#	--------------------------------------------------------
# remove some default bindings
map b
map c
# map d
# map n
map e
map m
map f
map "'"
# map l $open
map o
map p
# free to redefine w. default map was shell
# map w
map x

# map w $osh
map "'" :mark-load

#deleted selected
# map xd push :rm_delete<space>
map xd push :trash<space>
map xD push :rm_delete_forced<space>
map xx $list-oil.sh
map xy oilchange

# change wallpaper
map bg setwallpaper
map bp $fzfpinta

# chown current file
# map co chown
map co push :chown<space>
# chmod current file
# map cm chmod
map cm push :chmod<space>

map cc clear
map cd push :cd<space>
map cp cpdated

# find word in files
map fg push :glob-select<space>
map f* push :glob-select<space>
map fw push :findword<space>
map f/ push :findword<space>
map fz untar
map fZ targz
# map fZ push :zip

# map l reload

map md push :mkdir<space>
map mf push :makefile<space>
map mz extract
map ml mark-load
map ms mark-save
map mr mark-remove


map mx mkexec_toggle
map * mkexec_toggle
map _ mk_readonly_toggle
map + mk_readonly_toggle


map ec $csvedit "$f"
map ee $$EDITOR "$f"
map es $sudo $EDITOR "$f"

map go fzfcd
map g/ fzfcd
map gg fzf_last_changed
# map gt
map gb cd ~/bin
map gc cd ~/.config
map gd cd ~/Documents
map gf cd ~/ftp/files
map gC cd ~/crystal
map gD cd ~/Downloads
map gm cd ~/Music
map gM cd ~/mruby-sandbox
map gO cd ~/oil
map gp cd ~/Pictures
map gP cd ~/python
map gR cd ~/R
map gr cd ~/ruby-sandbox
map gv cd ~/Videos
map gw cd ~/Work
map gB fzfcdbig

map gz $gzip "$f"
map gu $gzip -d "$f"
map gx cd_OLDPWD


map <c-c>c $termite -e compad &

map oA %audacity "$f" &
map ob $foliate "$f"
map oc $csvedit "$f"
map od %lodraw "$f"
map oe $epr "$f"
map oos $sudo $EDITOR "$f"
map ow $bat "$f"
map oi %lximage-qt "$f"
map op %pinta "$f"
map oq %firefox "$f"
# map of %pdftotext.sh "$f"
map of pdftotext
map oF %pdfw "$f"
map om $runner.rb "$f"
map or catrb 
map ot $ttsedit "$f" 
map og $ged "$f" 
map oz $zbat "$f" 
# map pm playmedia

map pP paste
map PP xpaste
map pl $pastelink
map ps $pastelink

# map r rename_edit
# map R bulk-rename

map V $feh "$f"

map . set hidden!

map R $printf '%s\n' $fx | vidir -
map <f-2> $printf '%s\n' $fx | vidir -

set hidden on
set info size:time

# file types (with matching order)
ln             # LINK
or             # ORPHAN
tw      t       # STICKY_OTHER_WRITABLE
ow             # OTHER_WRITABLE
st      t       # STICKY
di             # DIR
pi      p       # FIFO
so      s       # SOCK
bd      b       # BLK
cd      c       # CHR
su      u       # SETUID
sg      g       # SETGID
ex             # EXEC
fi             # FILE
