#!/usr/bin/env ruby
# Id$ nonnax 2023-03-23 11:54:59 +0800
require 'texticle/texticle'
require 'file/file_importer'
require 'time/time_ext'

# Shell
# shell templater
# usage: shell template_file, key value key2 value2
# uses Texticle and FileImporter
# use @import 'partial'
# note: any shell command can also be used in the template
# multiple shell commands are separated by `&&` as usual
# useful template commands:
# basename(fname), ts(timestamp) for timestamp math, in addition to all public ruby methods
#
class Shell
  attr :cmd

  def initialize(f, **params)
    @template = FileImporter.parse(File.read(f))
    @template = @template.split(/\n/).reject{|l| l.match?(/^[!#]/)}.join("\n")
    @params = params
  end

  def render
    p @cmd=Texticle.parse(@template, **@params).gsub(/\n+/, '  ')
  end

  def run
    puts IO.popen(render, &:read)
  end

end

module Kernel
  def basename(f, ext='.*')
    File.basename(f, ext)
  end
  alias :ts :TStamp
end

f, *pairs = ARGV

unless f
  sample=<<~___
    #!/usr/bin/env shell

    echo
    {{3.times do}}
      hi {name}
    {{end}}
  ___
  f = [File.basename(Dir.pwd),'.tt'].join
  File.write(f, sample) unless File.exist?(f)
  help=<<~___
    usage: shell template key value key2 value2
    see template file: #{f}
  ___
  raise help
end

params = pairs.each_slice(2).to_a.to_h

Shell.new(f, **params)
.tap{|o| puts o.cmd}
.run
