#!/usr/bin/env ruby
# Id$ nonnax 2023-02-19 08:05:34
require 'file/filer'


list={}
list['v']  = "#!/usr/bin/env -S v run\n// Id$ nonnax #{Time.now()}"
list['rb'] = "#!/usr/bin/env ruby\n# Id$ nonnax #{Time.now()}"
list['sh'] = "#!/usr/bin/env bash\n# Id$ nonnax #{Time.now()}"
list['py'] = "#!/usr/bin/env python\n# Id$ nonnax #{Time.now()}"
list['pb'] = "#!/usr/bin/env -S pocket\n# Id$ nonnax #{Time.now()}"
list['lua'] = "#!/usr/bin/env -S lua\n-- Id$ nonnax #{Time.now()}"
list['moon'] = "#!/usr/bin/env -S moon\n-- Id$ nonnax #{Time.now()}"
list['wren'] = "#!/usr/bin/env -S wren\n// Id$ nonnax #{Time.now()}"
list['pk'] = "#!/usr/bin/env -S pocket\n# Id$ nonnax #{Time.now()}"
list['ex'] = "#!/usr/bin/env -S elixir\n# Id$ nonnax #{Time.now()}"
list['exs'] = "#!/usr/bin/env -S elixir\n# Id$ nonnax #{Time.now()}"
list['r'] = "#!/usr/bin/env -S Rscript\n# Id$ nonnax #{Time.now()}"
list['jl'] = "#!/usr/bin/env -S julia\n# Id$ nonnax #{Time.now()}"
list['js'] = "#!/usr/bin/env node\n// Id$ nonnax #{Time.now()}"
list['coffee'] = "#!/usr/bin/env coffee\n# Id$ nonnax #{Time.now()}"
list['R'] = "#!/usr/bin/env -S Rscript\n# Id$ nonnax #{Time.now()}"
list['html'] = <<~___
<!DOCTYPE html>
<html lang="en">
<!-- Id$ nonnax #{Time.now()} -->
<head>
    <meta charset="utf-8">
    <title>New Page</title>
    <link rel="stylesheet" href="css/styles.css">
    <style>
      body { font: 12px Arial;}
      path {
        stroke: steelblue;
        stroke-width: 2;
        fill: none;
      }
      .axis path,
      .axis line {
        fill: none;
        stroke: grey;
        stroke-width: 1;
        shape-rendering: crispEdges;
      }
    </style>
</head>
<body>
<script type="text/javascript" src="d3/d3.v7.min.js"></script>
<script>
//Id$ nonnax #{Time.now()}
</script>
</body>
</html>

___
list['ru'] =<<~___
# Id$ nonnax #{Time.now()}
require 'rack'

use Rack::Static,
  :urls => [""],
  :root => "public",
  :index => "index.html"

run lambda { |env|
  [ 200, { 'content-type'  => 'text/html' }, 'default' ]
}
___
def list.valid_ext(ext)
 self[ext.to_s] ? ext : ext
end

dirname=Pathname(Dir.pwd)
ext, = ARGV
ext = list.valid_ext(ext)

fname = [dirname.basename, ext].join('.')

fname = File.backup!(fname) if File.exist?(fname)

f, text = Filer.load(TextFile.new(fname)){}

f.write( String(list[ext]) )
